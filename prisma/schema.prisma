// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

 

model corporation {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  ruc              String?
  full_Description String?
  api_route        String?
  token            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  User             User[]
  patient          patient[]
  Services         Services[]
  Medicines        Medicines[]
}

model User {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  documentNumber String       @unique
  password       String
  role           Role         @default(ADMIN)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  //profile   Profile
  corporation    corporation? @relation(fields: [corporationId], references: [id])
  corporationId  String?      @db.ObjectId
  isActive       Boolean      @default(false)
  profile        profile?
  Doctors        Doctors?
}

model profile {
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique @db.ObjectId
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  phone     String?
  email     String  @unique
  degree    String?
  image     String?
}

enum Role {
  SUPER_ADMIN
  DOCTOR
  ADMIN
  PHARMACY
  USER
}

model patient {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String
  lastName        String
  documentNumber  String
  dateBirth       String
  location        String?
  gender          String
  numberPhone     String?
  departament     String?
  province        String?
  district        String?
  bloodType       String
  physicalHistory String
  image           String?
  job             String?
  appointment     Appointment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  corporation     corporation?  @relation(fields: [corporationId], references: [id])
  corporationId   String?       @db.ObjectId
}

model Appointment {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  corporationId    String
  documentNumber   String
  firstName        String
  lastName         String
  numberPhone      String
  appointmentDate  DateTime
  doctorValue      String
  totalServices    Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  patientId        String?        @db.ObjectId
  patient          patient?       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  typeVoucher      TYPEVOUCHER?
  typeDocument     TYPEDOCUMENT?
  documentIdentity String?
  payment          PAYMENT?
  status           Boolean        @default(false)
  servicesDesc     String[]
  servicesIds      String[]       @db.ObjectId
  services         Services[]     @relation(fields: [servicesIds], references: [id])
  triage           Triage?
  recipes          recipes?
  receipts         receipts?
  diagnostics      diagnostics?
  medical_tests    medical_tests?
  doctorId         String?        @db.ObjectId
  doctor           Doctors?       @relation(fields: [doctorId], references: [id])
}

enum TYPEVOUCHER {
  BOLETA
  FACTURA
  NOTA_DE_VENTA
}

enum TYPEDOCUMENT {
  DNI
  RUC
}

enum PAYMENT {
  EFECTIVO
  TARJETA
}

model Services {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String?
  category         String?
  full_description String?
  price            Float
  currency_type    CURRENCY      @default(PEN)
  cod_internal     Int           @unique
  has_igv          Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  appointment      Appointment[] @relation(fields: [appointmentIds], references: [id])
  appointmentIds   String[]      @db.ObjectId
  corporation      corporation?  @relation(fields: [corporationId], references: [id], onDelete: Cascade)
  corporationId    String        @db.ObjectId
}

enum CURRENCY {
  PEN
  USD
}

model Triage {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String      @unique @db.ObjectId
  weight        Float
  height        Float
  temperature   Float
  heartRate     Int
  bloodPressure String
  daysSick      Int
  saturate      Int         @default(0)
  observations  String?     @default("")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model medical_tests {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  observations  String?     @default("")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  doctorId      String?     @db.ObjectId
  doctor        Doctors?    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  tests         testInfo[]
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String      @unique @db.ObjectId
  status        Boolean     @default(false)
}

model recipes {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String      @unique @db.ObjectId
  doctorId      String?     @db.ObjectId
  doctor        Doctors?    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  medicinesIds  String[]    @db.ObjectId
  medicines     Medicines[] @relation(fields: [medicinesIds], references: [id])
  recipesDesc   Json[]
  observations  String?     @default("")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model testInfo {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  link            String?
  name            String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  medical_tests   medical_tests? @relation(fields: [medical_testsId], references: [id], onDelete: Cascade)
  medical_testsId String?        @db.ObjectId
}

model receipts {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String      @unique @db.ObjectId
  doctorId      String?     @db.ObjectId
  doctor        Doctors?    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  observations  String?     @default("")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model diagnostics {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String      @unique @db.ObjectId
  doctorId      String?     @db.ObjectId
  doctor        Doctors?    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  anamnesis     String
  clinicalExam  String
  diagnostic    String[]
  observations  String?     @default("")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Doctors {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  user             User            @relation(fields: [userId], references: [id])
  userId           String          @unique @db.ObjectId
  medical_relation String
  cieCod           Int?
  diagnostics      diagnostics[]
  receipts         receipts[]
  recipes          recipes[]
  medical_tests    medical_tests[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  Appointment      Appointment[]
}

model Medicines {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String?
  category         String?
  full_description String?
  price            Float
  currency_type    CURRENCY     @default(PEN)
  cod_internal     Int          @unique
  has_igv          Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  recipesIds       String[]     @db.ObjectId
  recipes          recipes[]    @relation(fields: [recipesIds], references: [id])
  corporationId    String       @db.ObjectId
  corporation      corporation? @relation(fields: [corporationId], references: [id], onDelete: Cascade)
}